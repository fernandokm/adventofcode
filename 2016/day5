#!/usr/bin/env python3
# Copyright (C) 2016 Fernando Matsumoto

"""
Advent of Code - 2016
Day 5: How About a Nice Game of Chess?
(http://adventofcode.com/2016/day/5)

Part One: given a door ID, find the eight-character
          password for the door. Using an increasing
          index, starting from 0, append that index
          to the door ID and, if the MD5 of the
          resulting string starts with '00000', append
          the sixth character of the hash to the password.

Part Two: using the same door ID, find the eight-character
          password for the door. Use the same process
          as for Part One, except that the sixth character
          represents the position in which the seventh
          character should appear in the password. Ignore
          invalid positions and use only the first
          character for each position.

Instruction format: the door ID
"""

import sys
import itertools
from multiprocessing import Pool
from hashlib import md5

def getHash(s):
    return md5(s.encode('utf8')).hexdigest()

def passwordDigits(index):
    h = getHash(DOOR_ID + str(index))
    if h[:5] == '00000':
        return h[5:7]

def findPasswords():
    password = ''
    password2 = dict()
    with Pool() as p:
        for digits in p.imap(passwordDigits, itertools.count(), chunksize=10000):
            if digits is None:
                continue
            password += digits[0]
            if digits[0] in '01234567':
                password2.setdefault(int(digits[0]), digits[1])
                if len(password2) == 8:
                    return password[:8], ''.join([password2[i] for i in range(8)])

def run():
    passwords = findPasswords()
    print('Door password (Part One):', passwords[0])
    print('Door password (Part Two):', passwords[1])

DOOR_ID = sys.argv[1]

if __name__ == '__main__':
    run()
