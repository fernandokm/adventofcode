#!/usr/bin/env python3
# Copyright (C) 2016 Fernando Matsumoto

"""
Advent of Code - 2016
Day 8: Two-Factor Authentication
(http://adventofcode.com/2016/day/8)

Part One: given a set of instructions for a 50 pixels wide
          by 6 pixels tall screen, find how many pixels
          should be lit.

Part Two: given the same set of instructions, what is the
          message that should be displayed (considering
          only uppercase letters).

Instruction format:
    each line an instruction for the screen.
    Possible instructions:
        "rect AxB" - turn on rectangle A pixels wide
                    by 6 tall on top left of screen.
        "rotate row y=A by B" or "rotate column x=A by B"
            - considering zero-based indexes
"""

import sys
import re
import numpy as np

def rect(screen, rows, cols):
    screen[:rows, :cols] = True

def rotateCol(screen, col, amount):
    screen[:, col] = np.roll(screen[:, col], amount)

def rotateRow(screen, row, amount):
    screen[row] = np.roll(screen[row], amount)

def parseInstruction(s):
    m = re.match(r'^(rect|rotate column x=|rotate row y=)\s?(\d+)\s?\w+\s?(\d+)$', s)
    a = int(m.group(2))
    b = int(m.group(3))
    if m.group(1) == 'rect':
        return lambda screen: rect(screen, b, a)
    elif m.group(1) == 'rotate column x=':
        return lambda screen: rotateCol(screen, a, b)
    else:
        return lambda screen: rotateRow(screen, a, b)

def makeScreen(rows, cols):
    return np.zeros((rows, cols), np.bool)

def pixelsLit(screen):
    return sum(sum(row) for row in screen)

def emulateDisplay(screen):
    for row in screen:
        print(''.join(' â– '[x] for x in row))

def run():
    instructions = [parseInstruction(x) for x in sys.argv[1:]]
    screen = makeScreen(6, 50)
    for instruction in instructions:
        instruction(screen)
    print('Number of lit pixels:', pixelsLit(screen))
    print('Screen display:')
    emulateDisplay(screen)

if __name__ == '__main__':
    run()
