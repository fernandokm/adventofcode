#!/usr/bin/env python3
# Copyright (C) 2016 Fernando Matsumoto

import sys
import itertools
import math

def damageAction(amount):
    def action(self, target):
        self['Damage'] += amount
    return action

def armorAction(amount):
    def action(self, target):
        target['Damage'] -= amount
    return action

def parseEquipments(s):
    equips = dict()
    for line in s.split('\n'):
        name, cost, dam, arm = line.split()
        action = armorAction(int(arm)) if int(arm) else damageAction(int(dam))
        equips[name] = int(cost), action
    return equips

weapons = parseEquipments('''Dagger        8     4       0\nShortsword   10     5       0\nWarhammer    25     6       0\nLongsword    40     7       0\nGreataxe     74     8       0''')
armor = parseEquipments('''Leather      13     0       1\nChainmail    31     0       2\nSplintmail   53     0       3\nBandedmail   75     0       4\nPlatemail   102     0       5''')
rings = parseEquipments('''Damage+1    25     1       0\nDamage+2    50     2       0\nDamage+3   100     3       0\nDefense+1   20     0       1\nDefense+2   40     0       2\nDefense+3   80     0       3''')

equipment = dict(weapons)
equipment.update(armor)
equipment.update(rings)

def equipmentCombinations():
    def isValid(x1, x2, x3, x4):
        w, a, r = 0, 0, 0
        for x in [x1,x2,x3,x4]:
            if x[0] in weapons.keys():
                w += 1
            elif x[0] in armor.keys():
                a += 1
            elif x[0] in rings.keys():
                r += 1
        return w == 1 and a <= 1 and r <= 2

    equip = list(equipment.items())
    equip.append( ('None', (0, damageAction(0))) )
    combos = set()
    for x1, x2, x3, x4 in itertools.product(equip, repeat=4):
        if isValid(x1, x2, x3, x4):
            combos.add(frozenset([x1[1], x2[1], x3[1], x4[1]]))
    return combos

def applyStats(self, target, equipment):
    for _, action in equipment:
        action(self, target)

def winner(self, target):
    selfWins = math.ceil(target['Hit Points'] / max(self['Damage'], 1))
    targetWins = math.ceil(self['Hit Points'] / max(target['Damage'], 1))
    if targetWins < selfWins:
        return 1
    return 0 # if selfWins == targetWins, self wins because self attacks first

def applyArmor(self, target):
    self['Damage'] -= target['Armor']
    target['Damage'] -= self['Armor']

def equipmentCombo(self, target, best):
    self, target = dict(self), dict(target)
    applyArmor(self, target)
    for combo in sorted(equipmentCombinations(), key=comboPrice, reverse=not best):
        s, t = dict(self), dict(target)
        applyStats(s, t, combo)
        if winner(s, t) == int(not best):
            return combo

def comboPrice(combo):
    return sum(c[0] for c in combo)

def parseStats(stats):
    s = {'Hit Points': 0, 'Damage': 0, 'Armor': 0}
    for stat in stats:
        k, v = stat.split(': ')
        s[k] = int(v)
    return s

if __name__ == '__main__':
    boss = parseStats(sys.argv[1:])
    self = parseStats(['Hit Points: 100'])
    print('Best combination:', comboPrice(equipmentCombo(self, boss, best=True)))
    print('Worst combination:', comboPrice(equipmentCombo(self, boss, best=False)))
