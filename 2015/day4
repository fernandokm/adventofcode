#!/usr/bin/env python3
# Copyright (C) 2016 Fernando Matsumoto

"""
Advent of Code - 2016
Day 4: The Ideal Stocking Stuffer

Part One: given a secret key, find the smallest integer
          which, appended to this key (without leading
          zeroes), produces an MD5 hash which starts
          with at least 5 zeroes (in hexadecimal).

Part Two: same as Part One, except the hash should start
          with at least 6 zeroes.

Instruction format: the secret key.
"""

from hashlib import md5
import itertools
import sys
from multiprocessing import Pool

def getHash(s):
    return md5(s.encode('utf8')).hexdigest()

RANGE_SIZE = 10000

def isRangeValidFiveZeroes(start):
    for i in range(start, start+RANGE_SIZE):
        if getHash(PREFIX + str(i))[:5] == '00000':
            return True, i
    return False, None

def isRangeValidSixZeroes(start):
    for i in range(start, start+RANGE_SIZE):
        if getHash(PREFIX + str(i))[:6] == '000000':
            return True, i
    return False, None

def findSmallestIntSuffix(validityFunc):
    with Pool() as p:
        hashes = p.imap(validityFunc, itertools.count(step=RANGE_SIZE))
        for valid, index in hashes:
            if valid:
                return index

def run():
    print('Five zeroes:', findSmallestIntSuffix(isRangeValidFiveZeroes))
    print('Six zeroes:', findSmallestIntSuffix(isRangeValidSixZeroes))

PREFIX = sys.argv[1]

if __name__ == '__main__':
    run()
