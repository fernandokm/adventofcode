#!/usr/bin/env python3
# Copyright (C) 2016 Fernando Matsumoto

from hashlib import md5
import itertools
import sys
from multiprocessing_on_dill import Pool

def getHash(s):
    m = md5()
    m.update(s.encode('utf8'))
    return m.hexdigest()

def findSmallestIntSuffix(prefix, condition):
    with Pool() as p:
        def isRangeValid(start):
            for i in range(start, start+10000):
                if condition(getHash(prefix + str(i))):
                    return True, i
            return False, None
        hashes = p.imap(isRangeValid, itertools.count(step=10000), 4)
        for valid, index in hashes:
            if valid:
                return index

if __name__ == '__main__':
    prefix = sys.argv[1]

    print('Five zeroes:', findSmallestIntSuffix(prefix, lambda x: x[:5] == '00000'))
    print('Six zeroes:', findSmallestIntSuffix(prefix, lambda x: x[:6] == '000000'))
