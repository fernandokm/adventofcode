#!/usr/bin/env python3
# Copyright (C) 2016 Fernando Matsumoto

import re
import sys
import numpy as np

def setRange(arr, _range, val):
    arr[_range] = val

on_off = {'turn on': (lambda lights, i: setRange(lights, i, True)),
        'turn off': (lambda lights, i: setRange(lights, i, False)),
        'toggle': (lambda lights, i: setRange(lights, i, np.invert(lights[i])))
        }

def addRange(arr, _range, add):
    lights[_range] += add

def gradient_turnoff(arr, _range):
    lights[_range][lights[_range] > 0]  -= 1

gradient = {'turn on': (lambda lights, i: addRange(lights, i, 1)),
        'turn off': gradient_turnoff,
        'toggle': (lambda lights, i: addRange(lights, i, 2))
        }

def parseInstruction(s, pattern=re.compile('(turn on|turn off|toggle) (\d+,\d+) through (\d+,\d+)')):
    match = pattern.match(s)
    operation = match.groups()[0]
    start = tuple(map(int, match.groups()[1].split(',')))
    end = tuple(map(int, match.groups()[2].split(',')))
    return operation, start, end

def get2dRange(start, end, inclusive=True):
    (x1, y1), (x2, y2) = start, end
    return slice(x1, x2+inclusive), slice(y1, y2+inclusive)

def execute(instruction, lights, ops):
    operation, start, end = instruction
    op = ops[operation]
    op(lights, get2dRange(start, end))

if __name__ == '__main__':
    instructions = list(map(parseInstruction, sys.argv[1:]))

    lights = np.zeros((1000,1000), np.bool)
    for i in instructions:
        execute(i, lights, on_off)
    print('Lights lit: ', lights.sum())

    lights = np.zeros((1000,1000), np.int16)
    for i in instructions:
        execute(i, lights, gradient)
    print('Light brightness: ', lights.sum())
