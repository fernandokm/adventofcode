#!/usr/bin/env python3
# Copyright (C) 2016 Fernando Matsumoto

"""
Advent of Code - 2015
Day 7: Some Assembly Required

Part One: given a set of instructions describing
          the signals to be provided to some wires
          and the gates connecting those wires to
          other wires, find the signal utimately
          provided to wire "a".

Part Two: after overriding wire "b" to the signal
          provided by wire "a" and reseting all
          wires other than "b", find the signal
          utimately provided to wire "a".

Instruction format:
    the lines will follow one of the formats
        <signal> -> <wire>
        NOT <wire1> -> <wire2>
        <wire1> <binGate> <wire2> -> <wire3>
    where the wires are identified by strings of
    lowercase letters, signals are 16-bit unsigned
    integers and <binGate> is one of: AND, OR,
    LSHIFT, RSHIFT. The signal flows from the left
    side of the arrow to the right side.
"""

import sys
import operator

OPS = {
    'NOT': lambda x: ~x & 0xFFFF,
    'AND': operator.and_,
    'OR': operator.or_,
    'LSHIFT': operator.lshift,
    'RSHIFT': operator.rshift
}

def parseGateInput(x):
    try:
        val = int(x)
        return lambda _: val
    except ValueError:
        return operator.itemgetter(x)

def parseInstruction(s):
    expr, out = s.split(' -> ')
    parts = expr.split(' ')
    if len(parts) == 3:
        op = OPS[parts[1]]
        args = parseGateInput(parts[0]), parseGateInput(parts[2])
    elif len(parts) == 2:
        op = OPS[parts[0]]
        args = parseGateInput(parts[1]),
    else:
        op = operator.pos
        args = parseGateInput(parts[0]),

    return op, args, out

def setConnection(circuit, instruction):
    op, args, out = instruction
    circuit[out] = lambda: op(*[arg(circuit) for arg in args])

def turnOn(circuit):
    done = False
    while not done:
        done = True
        for k, v in circuit.items():
            if callable(v):
                try:
                    circuit[k] = v()
                except TypeError:
                    done = False

def run():
    instructions = [parseInstruction(line) for line in sys.argv[1:]]
    circuit1 = dict()
    for i in instructions:
        setConnection(circuit1, i)
    turnOn(circuit1)
    print('Wire "a" (Part One):', circuit1['a'])

    circuit2 = dict()
    for i in instructions:
        setConnection(circuit2, i)
    setConnection(circuit2, parseInstruction(str(circuit1['a']) + ' -> b'))
    turnOn(circuit2)
    print('Wire "a" (Part Two):', circuit2['a'])

if __name__ == '__main__':
    run()
