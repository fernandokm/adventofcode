#!/usr/bin/env python3
# Copyright (C) 2016 Fernando Matsumoto

"""
Advent of Code - 2015
Day 7: Some Assembly Required


"""

import sys
import operator

OPS = {
    'NOT': lambda x: ~x & 0xFFFF,
    'AND': operator.and_,
    'OR': operator.or_,
    'LSHIFT': operator.lshift,
    'RSHIFT': operator.rshift
}

def parseGateInput(x):
    try:
        val = int(x)
        return lambda _: val
    except ValueError:
        return operator.itemgetter(x)

def parseInstruction(s):
    expr, out = s.split(' -> ')
    parts = expr.split(' ')
    if len(parts) == 3:
        op = OPS[parts[1]]
        args = parseGateInput(parts[0]), parseGateInput(parts[2])
    elif len(parts) == 2:
        op = OPS[parts[0]]
        args = parseGateInput(parts[1]),
    else:
        op = operator.pos
        args = parseGateInput(parts[0]),

    return op, args, out

def setConnection(circuit, instruction):
    op, args, out = instruction
    circuit[out] = lambda: op(*[arg(circuit) for arg in args])

def turnOn(circuit):
    done = False
    while not done:
        done = True
        for k, v in circuit.items():
            if callable(v):
                try:
                    circuit[k] = v()
                except TypeError:
                    done = False

def run():
    instructions = [parseInstruction(line) for line in sys.argv[1:]]
    circuit1 = dict()
    for i in instructions:
        setConnection(circuit1, i)
    turnOn(circuit1)
    print('Wire "a" (Part One):', circuit1['a'])

    circuit2 = dict()
    for i in instructions:
        setConnection(circuit2, i)
    setConnection(circuit2, parseInstruction(str(circuit1['a']) + ' -> b'))
    turnOn(circuit2)
    print('Wire "a":', circuit2['a'])

if __name__ == '__main__':
    run()
